import pandas as pd
import numpy as np
import seaborn as sns
import scipy.stats as stats
import matplotlib.pyplot as plt
# reading a csv file using pandas library
zoo=pd.read_csv("C:\\Users\\sanu\\Downloads\\Desktop\\Documents\\Excelr_1\\Python\\KNN\\Assignments\\Zoo.csv")
##zoo.rename({"Unnamed: 0":"a"}, axis="columns",inplace=True)
zoo.drop(["animal name"],axis=1,inplace=True)
zoo.columns
type(zoo["hair"])
type(zoo["feathers"])
# To get the count of null values in the data 
zoo.isnull().sum()
zoo.shape # 101 18 => Before dropping null values
# To drop null values ( dropping rows)
zoo.dropna().shape # 101 18 => After dropping null values
#####Exploratory Data Analysis#########################################################
zoo.mean() ## hair-0.425743, feathers-0.198020,eggs-0.584158,milk-0.405941
##airborne-0.237624,aquatic-0.356436,predator-0.554455,toothed-0.603960
##backbone-0.821782,breathes-0.792079,venomous-0.079208,fins-0.168317
##legs-2.841584,tail-0.742574,domestic-0.128713,catsize-0.435644,type-2.831683
zoo.median() 
zoo.mode() 
####Measures of Dispersion
zoo.var() 
zoo.std() ##hair-0.496921,feathers-0.400495,eggs-0.495325,milk-0.493522
##airborne-0.427750,aquatic-0.481335,predator-0.499505,toothed-0.491512,backbone-0.384605,
###breathes-0.407844,venomous-0.271410,fins-0.376013,legs-2.033385,tail-0.439397,domestic-0.336552,
### catsize-0.498314,type-2.102709
#### Calculate the range value
range1 = max(zoo['hair'])-min(zoo['hair'])  ### 1
range2 = max(zoo['feathers'])-min(zoo['feathers']) ### 1
range3 = max(zoo['eggs'])-min(zoo['eggs']) ### 1
range4 = max(zoo['milk'])-min(zoo['milk']) ### 1
range5 = max(zoo['airborne'])-min(zoo['airborne'])  ### 1
range6 = max(zoo['aquatic'])-min(zoo['aquatic']) ### 1
range7 = max(zoo['predator'])-min(zoo['predator']) ### 1
range8 = max(zoo['toothed'])-min(zoo['toothed']) ### 1
range9 = max(zoo['backbone'])-min(zoo['backbone'])  ### 1
range10 = max(zoo['breathes'])-min(zoo['breathes']) ### 1
range11 = max(zoo['venomous'])-min(zoo['venomous']) ### 1
range12 = max(zoo['fins'])-min(zoo['fins']) ### 1
range13 = max(zoo['legs'])-min(zoo['legs'])  ### 8
range14 = max(zoo['tail'])-min(zoo['tail']) ### 1
range15 = max(zoo['domestic'])-min(zoo['domestic']) ### 1
range16 = max(zoo['catsize'])-min(zoo['catsize']) ### 1
range17 = max(zoo['type'])-min(zoo['type']) #### 6
### Calculate skewness and Kurtosis
zoo.skew() 
zoo.kurt() 
#### Various graphs 
plt.hist(zoo["hair"])
plt.hist(zoo["feathers"])
plt.hist(zoo["eggs"])
plt.hist(zoo["milk"])
plt.hist(zoo["airborne"])
plt.hist(zoo["aquatic"])
plt.hist(zoo["predator"])
plt.hist(zoo["toothed"])
plt.hist(zoo["backbone"])
plt.hist(zoo["breathes"])
plt.hist(zoo["venomous"])
plt.hist(zoo["fins"])
plt.hist(zoo["legs"])
plt.hist(zoo["tail"])
plt.hist(zoo["domestic"])
plt.hist(zoo["catsize"])
plt.hist(zoo["type"])
plt.boxplot(zoo["hair"],0,"rs",0)
plt.boxplot(zoo["feathers"],0,"rs",0)
plt.boxplot(zoo["eggs"],0,"rs",0)
plt.boxplot(zoo["milk"],0,"rs",0)
plt.boxplot(zoo["airborne"],0,"rs",0)
plt.boxplot(zoo["aquatic"],0,"rs",0)
plt.boxplot(zoo["predator"],0,"rs",0)
plt.boxplot(zoo["toothed"],0,"rs",0)
plt.boxplot(zoo["backbone"],0,"rs",0)
plt.boxplot(zoo["breathes"],0,"rs",0)
plt.boxplot(zoo["venomous"],0,"rs",0)
plt.boxplot(zoo["fins"],0,"rs",0)
plt.boxplot(zoo["legs"],0,"rs",0)
plt.boxplot(zoo["tail"],0,"rs",0)
plt.boxplot(zoo["domestic"],0,"rs",0)
plt.boxplot(zoo["catsize"],0,"rs",0)
plt.boxplot(zoo["type"],0,"rs",0)
# table 
pd.crosstab(zoo["hair"],zoo["feathers"])
pd.crosstab(zoo["hair"],zoo["eggs"])
pd.crosstab(zoo["hair"],zoo["milk"])
pd.crosstab(zoo["hair"],zoo["airborne"])
pd.crosstab(zoo["hair"],zoo["aquatic"])
pd.crosstab(zoo["hair"],zoo["predator"])
pd.crosstab(zoo["hair"],zoo["toothed"])
pd.crosstab(zoo["hair"],zoo["backbone"])
pd.crosstab(zoo["hair"],zoo["breathes"])
pd.crosstab(zoo["hair"],zoo["venomous"])
pd.crosstab(zoo["hair"],zoo["fins"])
pd.crosstab(zoo["hair"],zoo["legs"])
pd.crosstab(zoo["hair"],zoo["tail"])
pd.crosstab(zoo["hair"],zoo["domestic"])
pd.crosstab(zoo["hair"],zoo["catsize"])
pd.crosstab(zoo["hair"],zoo["type"])
pd.crosstab(zoo["feathers"],zoo["eggs"])
pd.crosstab(zoo["feathers"],zoo["milk"])
pd.crosstab(zoo["feathers"],zoo["airborne"])
pd.crosstab(zoo["feathers"],zoo["aquatic"])
pd.crosstab(zoo["feathers"],zoo["predator"])
pd.crosstab(zoo["feathers"],zoo["toothed"])
pd.crosstab(zoo["feathers"],zoo["backbone"])
pd.crosstab(zoo["feathers"],zoo["breathes"])
pd.crosstab(zoo["feathers"],zoo["venomous"])
pd.crosstab(zoo["feathers"],zoo["fins"])
pd.crosstab(zoo["feathers"],zoo["legs"])
pd.crosstab(zoo["feathers"],zoo["tail"])
pd.crosstab(zoo["feathers"],zoo["domestic"])
pd.crosstab(zoo["feathers"],zoo["catsize"])
pd.crosstab(zoo["feathers"],zoo["type"])
pd.crosstab(zoo["eggs"],zoo["milk"])
pd.crosstab(zoo["eggs"],zoo["airborne"])
pd.crosstab(zoo["eggs"],zoo["aquatic"])
pd.crosstab(zoo["eggs"],zoo["predator"])
pd.crosstab(zoo["eggs"],zoo["toothed"])
pd.crosstab(zoo["eggs"],zoo["backbone"])
pd.crosstab(zoo["eggs"],zoo["breathes"])
pd.crosstab(zoo["eggs"],zoo["venomous"])
pd.crosstab(zoo["eggs"],zoo["fins"])
pd.crosstab(zoo["eggs"],zoo["legs"])
pd.crosstab(zoo["eggs"],zoo["tail"])
pd.crosstab(zoo["eggs"],zoo["domestic"])
pd.crosstab(zoo["eggs"],zoo["catsize"])
pd.crosstab(zoo["eggs"],zoo["type"])
pd.crosstab(zoo["milk"],zoo["airborne"])
pd.crosstab(zoo["milk"],zoo["aquatic"])
pd.crosstab(zoo["milk"],zoo["predator"])
pd.crosstab(zoo["milk"],zoo["toothed"])
pd.crosstab(zoo["milk"],zoo["backbone"])
pd.crosstab(zoo["milk"],zoo["breathes"])
pd.crosstab(zoo["milk"],zoo["venomous"])
pd.crosstab(zoo["milk"],zoo["fins"])
pd.crosstab(zoo["milk"],zoo["legs"])
pd.crosstab(zoo["milk"],zoo["tail"])
pd.crosstab(zoo["milk"],zoo["domestic"])
pd.crosstab(zoo["milk"],zoo["catsize"])
pd.crosstab(zoo["milk"],zoo["type"])
pd.crosstab(zoo["airborne"],zoo["aquatic"])
pd.crosstab(zoo["airborne"],zoo["predator"])
pd.crosstab(zoo["airborne"],zoo["toothed"])
pd.crosstab(zoo["airborne"],zoo["backbone"])
pd.crosstab(zoo["airborne"],zoo["breathes"])
pd.crosstab(zoo["airborne"],zoo["venomous"])
pd.crosstab(zoo["airborne"],zoo["fins"])
pd.crosstab(zoo["airborne"],zoo["legs"])
pd.crosstab(zoo["airborne"],zoo["tail"])
pd.crosstab(zoo["airborne"],zoo["domestic"])
pd.crosstab(zoo["airborne"],zoo["catsize"])
pd.crosstab(zoo["airborne"],zoo["type"])
pd.crosstab(zoo["aquatic"],zoo["predator"])
pd.crosstab(zoo["aquatic"],zoo["toothed"])
pd.crosstab(zoo["aquatic"],zoo["backbone"])
pd.crosstab(zoo["aquatic"],zoo["breathes"])
pd.crosstab(zoo["aquatic"],zoo["venomous"])
pd.crosstab(zoo["aquatic"],zoo["fins"])
pd.crosstab(zoo["aquatic"],zoo["legs"])
pd.crosstab(zoo["aquatic"],zoo["tail"])
pd.crosstab(zoo["aquatic"],zoo["domestic"])
pd.crosstab(zoo["aquatic"],zoo["catsize"])
pd.crosstab(zoo["aquatic"],zoo["type"])
pd.crosstab(zoo["predator"],zoo["toothed"])
pd.crosstab(zoo["predator"],zoo["backbone"])
pd.crosstab(zoo["predator"],zoo["breathes"])
pd.crosstab(zoo["predator"],zoo["venomous"])
pd.crosstab(zoo["predator"],zoo["fins"])
pd.crosstab(zoo["predator"],zoo["legs"])
pd.crosstab(zoo["predator"],zoo["tail"])
pd.crosstab(zoo["predator"],zoo["domestic"])
pd.crosstab(zoo["predator"],zoo["catsize"])
pd.crosstab(zoo["predator"],zoo["type"])
pd.crosstab(zoo["toothed"],zoo["backbone"])
pd.crosstab(zoo["toothed"],zoo["breathes"])
pd.crosstab(zoo["toothed"],zoo["venomous"])
pd.crosstab(zoo["toothed"],zoo["fins"])
pd.crosstab(zoo["toothed"],zoo["legs"])
pd.crosstab(zoo["toothed"],zoo["tail"])
pd.crosstab(zoo["toothed"],zoo["domestic"])
pd.crosstab(zoo["toothed"],zoo["catsize"])
pd.crosstab(zoo["toothed"],zoo["type"])
pd.crosstab(zoo["backbone"],zoo["breathes"])
pd.crosstab(zoo["backbone"],zoo["venomous"])
pd.crosstab(zoo["backbone"],zoo["fins"])
pd.crosstab(zoo["backbone"],zoo["legs"])
pd.crosstab(zoo["backbone"],zoo["tail"])
pd.crosstab(zoo["backbone"],zoo["domestic"])
pd.crosstab(zoo["backbone"],zoo["catsize"])
pd.crosstab(zoo["backbone"],zoo["type"])
pd.crosstab(zoo["breathes"],zoo["venomous"])
pd.crosstab(zoo["breathes"],zoo["fins"])
pd.crosstab(zoo["breathes"],zoo["legs"])
pd.crosstab(zoo["breathes"],zoo["tail"])
pd.crosstab(zoo["breathes"],zoo["domestic"])
pd.crosstab(zoo["breathes"],zoo["catsize"])
pd.crosstab(zoo["breathes"],zoo["type"])
pd.crosstab(zoo["venomous"],zoo["fins"])
pd.crosstab(zoo["venomous"],zoo["legs"])
pd.crosstab(zoo["venomous"],zoo["tail"])
pd.crosstab(zoo["venomous"],zoo["domestic"])
pd.crosstab(zoo["venomous"],zoo["catsize"])
pd.crosstab(zoo["venomous"],zoo["type"])
pd.crosstab(zoo["fins"],zoo["legs"])
pd.crosstab(zoo["fins"],zoo["tail"])
pd.crosstab(zoo["fins"],zoo["domestic"])
pd.crosstab(zoo["fins"],zoo["catsize"])
pd.crosstab(zoo["fins"],zoo["type"])
pd.crosstab(zoo["legs"],zoo["tail"])
pd.crosstab(zoo["legs"],zoo["domestic"])
pd.crosstab(zoo["legs"],zoo["catsize"])
pd.crosstab(zoo["legs"],zoo["type"])
pd.crosstab(zoo["tail"],zoo["domestic"])
pd.crosstab(zoo["tail"],zoo["catsize"])
pd.crosstab(zoo["tail"],zoo["type"])
pd.crosstab(zoo["domestic"],zoo["catsize"])
pd.crosstab(zoo["domestic"],zoo["type"])
pd.crosstab(zoo["catsize"],zoo["type"])
## Barplot
pd.crosstab(zoo["hair"],zoo["feathers"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["eggs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["milk"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["airborne"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["aquatic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["predator"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["hair"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["eggs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["milk"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["airborne"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["aquatic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["predator"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["feathers"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["milk"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["airborne"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["aquatic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["predator"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["eggs"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["airborne"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["aquatic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["predator"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["milk"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["aquatic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["predator"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["airborne"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["predator"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["aquatic"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["toothed"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["predator"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["backbone"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["toothed"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["breathes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["backbone"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["venomous"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["breathes"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["venomous"],zoo["fins"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["venomous"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["venomous"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["venomous"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["venomous"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["venomous"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["fins"],zoo["legs"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["fins"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["fins"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["fins"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["fins"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["legs"],zoo["tail"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["legs"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["legs"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["legs"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["tail"],zoo["domestic"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["tail"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["tail"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["domestic"],zoo["catsize"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["domestic"],zoo["type"]).plot(kind = "bar", width = 1.85)
pd.crosstab(zoo["catsize"],zoo["type"]).plot(kind = "bar", width = 1.85)
sns.countplot(x="hair",data=zoo,palette="hls")
sns.countplot(x="feathers",data=zoo,palette="hls")
sns.countplot(x="eggs",data=zoo,palette="hls")
sns.countplot(x="milk",data=zoo,palette="hls")
sns.countplot(x="airborne",data=zoo,palette="hls")
sns.countplot(x="aquatic",data=zoo,palette="hls")
sns.countplot(x="predator",data=zoo,palette="hls")
sns.countplot(x="toothed",data=zoo,palette="hls")
sns.countplot(x="backbone",data=zoo,palette="hls")
sns.countplot(x="breathes",data=zoo,palette="hls")
sns.countplot(x="venomous",data=zoo,palette="hls")
sns.countplot(x="fins",data=zoo,palette="hls")
sns.countplot(x="legs",data=zoo,palette="hls")
sns.countplot(x="tail",data=zoo,palette="hls")
sns.countplot(x="domestic",data=zoo,palette="hls")
sns.countplot(x="catsize",data=zoo,palette="hls")
sns.countplot(x="type",data=zoo,palette="hls")
###Boxplot
sns.boxplot(x="hair",y="feathers",data=zoo,palette="hls")
sns.boxplot(x="hair",y="eggs",data=zoo,palette="hls")
sns.boxplot(x="hair",y="milk",data=zoo,palette="hls")
sns.boxplot(x="hair",y="airborne",data=zoo,palette="hls")
sns.boxplot(x="hair",y="aquatic",data=zoo,palette="hls")
sns.boxplot(x="hair",y="predator",data=zoo,palette="hls")
sns.boxplot(x="hair",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="hair",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="hair",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="hair",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="hair",y="fins",data=zoo,palette="hls")
sns.boxplot(x="hair",y="legs",data=zoo,palette="hls")
sns.boxplot(x="hair",y="tail",data=zoo,palette="hls")
sns.boxplot(x="hair",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="hair",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="hair",y="type",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="eggs",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="milk",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="airborne",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="aquatic",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="predator",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="fins",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="legs",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="tail",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="feathers",y="type",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="milk",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="airborne",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="aquatic",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="predator",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="fins",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="legs",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="tail",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="eggs",y="type",data=zoo,palette="hls")
sns.boxplot(x="milk",y="airborne",data=zoo,palette="hls")
sns.boxplot(x="milk",y="aquatic",data=zoo,palette="hls")
sns.boxplot(x="milk",y="predator",data=zoo,palette="hls")
sns.boxplot(x="milk",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="milk",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="milk",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="milk",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="milk",y="fins",data=zoo,palette="hls")
sns.boxplot(x="milk",y="legs",data=zoo,palette="hls")
sns.boxplot(x="milk",y="tail",data=zoo,palette="hls")
sns.boxplot(x="milk",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="milk",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="milk",y="type",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="aquatic",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="predator",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="fins",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="legs",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="tail",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="airborne",y="type",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="predator",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="fins",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="legs",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="tail",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="aquatic",y="type",data=zoo,palette="hls")
sns.boxplot(x="predator",y="toothed",data=zoo,palette="hls")
sns.boxplot(x="predator",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="predator",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="predator",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="predator",y="fins",data=zoo,palette="hls")
sns.boxplot(x="predator",y="legs",data=zoo,palette="hls")
sns.boxplot(x="predator",y="tail",data=zoo,palette="hls")
sns.boxplot(x="predator",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="predator",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="predator",y="type",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="backbone",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="fins",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="legs",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="tail",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="toothed",y="type",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="breathes",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="fins",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="legs",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="tail",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="backbone",y="type",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="venomous",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="fins",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="legs",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="tail",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="breathes",y="type",data=zoo,palette="hls")
sns.boxplot(x="venomous",y="fins",data=zoo,palette="hls")
sns.boxplot(x="venomous",y="legs",data=zoo,palette="hls")
sns.boxplot(x="venomous",y="tail",data=zoo,palette="hls")
sns.boxplot(x="venomous",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="venomous",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="venomous",y="type",data=zoo,palette="hls")
sns.boxplot(x="fins",y="legs",data=zoo,palette="hls")
sns.boxplot(x="fins",y="tail",data=zoo,palette="hls")
sns.boxplot(x="fins",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="fins",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="fins",y="type",data=zoo,palette="hls")
sns.boxplot(x="legs",y="tail",data=zoo,palette="hls")
sns.boxplot(x="legs",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="legs",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="legs",y="type",data=zoo,palette="hls")
sns.boxplot(x="tail",y="domestic",data=zoo,palette="hls")
sns.boxplot(x="tail",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="tail",y="type",data=zoo,palette="hls")
sns.boxplot(x="domestic",y="catsize",data=zoo,palette="hls")
sns.boxplot(x="domestic",y="type",data=zoo,palette="hls")
sns.boxplot(x="catsize",y="type",data=zoo,palette="hls")
sns.pairplot(zoo.iloc[:,0:15]) # histogram of each column and scatter plot of each variable with respect to other columns
zoo["hair"].value_counts()
zoo["feathers"].value_counts()
zoo["eggs"].value_counts()
zoo["milk"].value_counts()
zoo["airborne"].value_counts()
zoo["aquatic"].value_counts()
zoo["predator"].value_counts()
zoo["toothed"].value_counts()
zoo["backbone"].value_counts()
zoo["breathes"].value_counts()
zoo["venomous"].value_counts()
zoo["fins"].value_counts()
zoo["legs"].value_counts()
zoo["tail"].value_counts()
zoo["domestic"].value_counts()
zoo["catsize"].value_counts()
zoo["type"].value_counts()
zoo["hair"].value_counts().plot(kind = "pie")
zoo["feathers"].value_counts().plot(kind = "pie")
zoo["eggs"].value_counts().plot(kind = "pie")
zoo["milk"].value_counts().plot(kind = "pie")
zoo["airborne"].value_counts().plot(kind = "pie")
zoo["aquatic"].value_counts().plot(kind = "pie")
zoo["predator"].value_counts().plot(kind = "pie")
zoo["toothed"].value_counts().plot(kind = "pie")
zoo["backbone"].value_counts().plot(kind = "pie")
zoo["breathes"].value_counts().plot(kind = "pie")
zoo["venomous"].value_counts().plot(kind = "pie")
zoo["fins"].value_counts().plot(kind = "pie")
zoo["legs"].value_counts().plot(kind = "pie")
zoo["tail"].value_counts().plot(kind = "pie")
zoo["domestic"].value_counts().plot(kind = "pie")
zoo["catsize"].value_counts().plot(kind = "pie")
zoo["type"].value_counts().plot(kind = "pie")
sns.pairplot(zoo,hue="hair",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="feathers",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="eggs",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="milk",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="airborne",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="aquatic",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="predator",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="toothed",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="backbone",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="breathes",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="venomous",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="fins",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="legs",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="tail",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="domestic",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="catsize",height=1.2,diag_kind = "kde")
sns.pairplot(zoo,hue="type",height=1.2,diag_kind = "kde")
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"feathers","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"eggs","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"milk","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"airborne","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"aquatic","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"predator","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"toothed","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"backbone","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"breathes","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"venomous","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"fins","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"legs","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"tail","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"domestic","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"catsize","hair").add_legend()
sns.FacetGrid(zoo,hue="hair").map(plt.scatter,"type","hair").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"eggs","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"milk","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"airborne","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"aquatic","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"predator","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"toothed","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"backbone","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"breathes","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"venomous","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"fins","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"legs","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"tail","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"domestic","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"catsize","feathers").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(plt.scatter,"type","feathers").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"milk","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"airborne","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"aquatic","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"predator","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"toothed","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"backbone","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"breathes","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"venomous","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"fins","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"legs","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"tail","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"domestic","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"catsize","eggs").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(plt.scatter,"type","eggs").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"airborne","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"aquatic","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"predator","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"toothed","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"backbone","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"breathes","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"venomous","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"fins","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"legs","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"tail","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"domestic","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"catsize","milk").add_legend()
sns.FacetGrid(zoo,hue="milk").map(plt.scatter,"type","milk").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"aquatic","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"predator","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"toothed","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"backbone","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"breathes","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"venomous","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"fins","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"legs","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"tail","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"domestic","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"catsize","airborne").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(plt.scatter,"type","airborne").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"predator","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"toothed","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"backbone","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"breathes","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"venomous","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"fins","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"legs","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"tail","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"domestic","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"catsize","aquatic").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(plt.scatter,"type","aquatic").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"toothed","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"backbone","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"breathes","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"venomous","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"fins","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"legs","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"tail","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"domestic","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"catsize","predator").add_legend()
sns.FacetGrid(zoo,hue="predator").map(plt.scatter,"type","predator").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"backbone","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"breathes","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"venomous","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"fins","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"legs","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"tail","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"domestic","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"catsize","toothed").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(plt.scatter,"type","toothed").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"breathes","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"venomous","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"fins","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"legs","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"tail","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"domestic","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"catsize","backbone").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(plt.scatter,"type","backbone").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"venomous","breathes").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"fins","breathes").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"legs","breathes").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"tail","breathes").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"domestic","breathes").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"catsize","breathes").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(plt.scatter,"type","breathes").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(plt.scatter,"fins","venomous").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(plt.scatter,"legs","venomous").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(plt.scatter,"tail","venomous").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(plt.scatter,"domestic","venomous").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(plt.scatter,"catsize","venomous").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(plt.scatter,"type","venomous").add_legend()
sns.FacetGrid(zoo,hue="fins").map(plt.scatter,"legs","fins").add_legend()
sns.FacetGrid(zoo,hue="fins").map(plt.scatter,"tail","fins").add_legend()
sns.FacetGrid(zoo,hue="fins").map(plt.scatter,"domestic","fins").add_legend()
sns.FacetGrid(zoo,hue="fins").map(plt.scatter,"catsize","fins").add_legend()
sns.FacetGrid(zoo,hue="fins").map(plt.scatter,"type","fins").add_legend()
sns.FacetGrid(zoo,hue="legs").map(plt.scatter,"tail","legs").add_legend()
sns.FacetGrid(zoo,hue="legs").map(plt.scatter,"domestic","legs").add_legend()
sns.FacetGrid(zoo,hue="legs").map(plt.scatter,"catsize","legs").add_legend()
sns.FacetGrid(zoo,hue="legs").map(plt.scatter,"type","legs").add_legend()
sns.FacetGrid(zoo,hue="tail").map(plt.scatter,"domestic","tail").add_legend()
sns.FacetGrid(zoo,hue="tail").map(plt.scatter,"catsize","tail").add_legend()
sns.FacetGrid(zoo,hue="tail").map(plt.scatter,"type","tail").add_legend()
sns.FacetGrid(zoo,hue="domestic").map(plt.scatter,"catsize","domestic").add_legend()
sns.FacetGrid(zoo,hue="domestic").map(plt.scatter,"type","domestic").add_legend()
sns.FacetGrid(zoo,hue="catsize").map(plt.scatter,"type","catsize").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"feathers").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"eggs").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"milk").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"airborne").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"aquatic").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"predator").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"toothed").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"backbone").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"breathes").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"venomous").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"fins").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"legs").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"tail").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"domestic").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"catsize").add_legend()
sns.FacetGrid(zoo,hue="hair").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="feathers").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="eggs").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="milk").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="airborne").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="aquatic").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="predator").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="toothed").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="backbone").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="breathes").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="venomous").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="venomous").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="venomous").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="venomous").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="venomous").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="venomous").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="fins").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="fins").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="fins").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="fins").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="fins").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="legs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="legs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="legs").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="legs").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="tail").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="tail").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="tail").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="domestic").map(sns.kdeplot).add_legend()
sns.FacetGrid(zoo,hue="domestic").map(sns.kdeplot,"type").add_legend()
sns.FacetGrid(zoo,hue="catsize").map(sns.kdeplot,"type").add_legend()
help(plt.plot) # explore different visualizations among the scatter plot
import pylab   
# Checking Whether data is normally distributed
stats.probplot(zoo['hair'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['hair']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['hair']),dist="norm",plot=pylab)
stats.probplot((zoo['hair'] * zoo['hair']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['hair']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['hair'])*np.exp(zoo['hair']),dist="norm",plot=pylab)
reci_1=1/zoo['hair']
reci_1_2=reci_1 * reci_1
reci_1_4=reci_1_2 * reci_1_2
stats.probplot(reci_1*reci_1,dist="norm",plot=pylab)
stats.probplot(reci_1_2,dist="norm",plot=pylab)
stats.probplot(reci_1_4,dist="norm",plot=pylab)
stats.probplot(reci_1_4*reci_1_4,dist="norm",plot=pylab)
stats.probplot((reci_1_4*reci_1_4)*(reci_1_4*reci_1_4),dist="norm",plot=pylab)
stats.probplot(((zoo['hair'] * zoo['hair'])+zoo['hair']),dist="norm",plot=pylab)
stats.probplot(zoo['feathers'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['feathers']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['feathers']),dist="norm",plot=pylab)
stats.probplot((zoo['feathers'] * zoo['feathers']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['feathers']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['feathers'])*np.exp(zoo['feathers']),dist="norm",plot=pylab)
reci_2=1/zoo['feathers']
reci_2_2=reci_2 * reci_2
reci_2_4=reci_2_2 * reci_2_2
stats.probplot(reci_2*reci_2,dist="norm",plot=pylab)
stats.probplot(reci_2_2,dist="norm",plot=pylab)
stats.probplot(reci_2_4,dist="norm",plot=pylab)
stats.probplot(reci_2_4*reci_2_4,dist="norm",plot=pylab)
stats.probplot((reci_2_4*reci_2_4)*(reci_2_4*reci_2_4),dist="norm",plot=pylab)
stats.probplot(((zoo['feathers'] * zoo['feathers'])+zoo['feathers']),dist="norm",plot=pylab)
stats.probplot(zoo['eggs'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['eggs']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['eggs']),dist="norm",plot=pylab)
stats.probplot((zoo['eggs'] * zoo['eggs']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['eggs']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['eggs'])*np.exp(zoo['eggs']),dist="norm",plot=pylab)
reci_3=1/zoo['eggs']
reci_3_2=reci_3 * reci_3
reci_3_4=reci_3_2 * reci_3_2
stats.probplot(reci_3*reci_3,dist="norm",plot=pylab)
stats.probplot(reci_3_2,dist="norm",plot=pylab)
stats.probplot(reci_3_4,dist="norm",plot=pylab)
stats.probplot(reci_3_4*reci_3_4,dist="norm",plot=pylab)
stats.probplot((reci_3_4*reci_3_4)*(reci_3_4*reci_3_4),dist="norm",plot=pylab)
stats.probplot(((zoo['eggs'] * zoo['eggs'])+zoo['eggs']),dist="norm",plot=pylab)
stats.probplot(zoo['milk'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['milk']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['milk']),dist="norm",plot=pylab)
stats.probplot((zoo['milk'] * zoo['milk']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['milk']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['milk'])*np.exp(zoo['milk']),dist="norm",plot=pylab)
reci_4=1/zoo['milk']
reci_4_2=reci_4 * reci_4
reci_4_4=reci_4_2 * reci_4_2
stats.probplot(reci_4*reci_4,dist="norm",plot=pylab)
stats.probplot(reci_4_2,dist="norm",plot=pylab)
stats.probplot(reci_4_4,dist="norm",plot=pylab)
stats.probplot(reci_4_4*reci_4_4,dist="norm",plot=pylab)
stats.probplot((reci_4_4*reci_4_4)*(reci_4_4*reci_4_4),dist="norm",plot=pylab)
stats.probplot(((zoo['milk'] * zoo['milk'])+zoo['milk']),dist="norm",plot=pylab)
stats.probplot(zoo['airborne'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['airborne']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['airborne']),dist="norm",plot=pylab)
stats.probplot((zoo['airborne'] * zoo['airborne']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['airborne']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['airborne'])*np.exp(zoo['airborne']),dist="norm",plot=pylab)
reci_5=1/zoo['airborne']
reci_5_2=reci_5 * reci_5
reci_5_4=reci_5_2 * reci_5_2
stats.probplot(reci_5*reci_5,dist="norm",plot=pylab)
stats.probplot(reci_5_2,dist="norm",plot=pylab)
stats.probplot(reci_5_4,dist="norm",plot=pylab)
stats.probplot(reci_5_4*reci_5_4,dist="norm",plot=pylab)
stats.probplot((reci_5_4*reci_5_4)*(reci_5_4*reci_5_4),dist="norm",plot=pylab)
stats.probplot(((zoo['airborne'] * zoo['airborne'])+zoo['airborne']),dist="norm",plot=pylab)
stats.probplot(zoo['aquatic'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['aquatic']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['aquatic']),dist="norm",plot=pylab)
stats.probplot((zoo['aquatic'] * zoo['aquatic']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['aquatic']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['aquatic'])*np.exp(zoo['aquatic']),dist="norm",plot=pylab)
reci_6=1/zoo['aquatic']
reci_6_2=reci_6 * reci_6
reci_6_4=reci_6_2 * reci_6_2
stats.probplot(reci_6*reci_6,dist="norm",plot=pylab)
stats.probplot(reci_6_2,dist="norm",plot=pylab)
stats.probplot(reci_6_4,dist="norm",plot=pylab)
stats.probplot(reci_6_4*reci_6_4,dist="norm",plot=pylab)
stats.probplot((reci_6_4*reci_6_4)*(reci_6_4*reci_6_4),dist="norm",plot=pylab)
stats.probplot(((zoo['aquatic'] * zoo['aquatic'])+zoo['aquatic']),dist="norm",plot=pylab)
stats.probplot(zoo['predator'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['predator']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['predator']),dist="norm",plot=pylab)
stats.probplot((zoo['predator'] * zoo['predator']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['predator']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['predator'])*np.exp(zoo['predator']),dist="norm",plot=pylab)
reci_7=1/zoo['predator']
reci_7_2=reci_7 * reci_7
reci_7_4=reci_7_2 * reci_7_2
stats.probplot(reci_7*reci_7,dist="norm",plot=pylab)
stats.probplot(reci_7_2,dist="norm",plot=pylab)
stats.probplot(reci_7_4,dist="norm",plot=pylab)
stats.probplot(reci_7_4*reci_7_4,dist="norm",plot=pylab)
stats.probplot((reci_7_4*reci_7_4)*(reci_7_4*reci_7_4),dist="norm",plot=pylab)
stats.probplot(((zoo['predator'] * zoo['predator'])+zoo['predator']),dist="norm",plot=pylab)
stats.probplot(zoo['toothed'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['toothed']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['toothed']),dist="norm",plot=pylab)
stats.probplot((zoo['toothed'] * zoo['toothed']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['toothed']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['toothed'])*np.exp(zoo['toothed']),dist="norm",plot=pylab)
reci_8=1/zoo['toothed']
reci_8_2=reci_8 * reci_8
reci_8_4=reci_8_2 * reci_8_2
stats.probplot(reci_8*reci_8,dist="norm",plot=pylab)
stats.probplot(reci_8_2,dist="norm",plot=pylab)
stats.probplot(reci_8_4,dist="norm",plot=pylab)
stats.probplot(reci_8_4*reci_8_4,dist="norm",plot=pylab)
stats.probplot((reci_8_4*reci_8_4)*(reci_8_4*reci_8_4),dist="norm",plot=pylab)
stats.probplot(((zoo['toothed'] * zoo['toothed'])+zoo['toothed']),dist="norm",plot=pylab)
stats.probplot(zoo['backbone'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['backbone']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['backbone']),dist="norm",plot=pylab)
stats.probplot((zoo['backbone'] * zoo['backbone']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['backbone']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['backbone'])*np.exp(zoo['backbone']),dist="norm",plot=pylab)
reci_9=1/zoo['backbone']
reci_9_2=reci_9 * reci_9
reci_9_4=reci_9_2 * reci_9_2
stats.probplot(reci_9*reci_9,dist="norm",plot=pylab)
stats.probplot(reci_9_2,dist="norm",plot=pylab)
stats.probplot(reci_9_4,dist="norm",plot=pylab)
stats.probplot(reci_9_4*reci_9_4,dist="norm",plot=pylab)
stats.probplot((reci_9_4*reci_9_4)*(reci_9_4*reci_9_4),dist="norm",plot=pylab)
stats.probplot(((zoo['backbone'] * zoo['backbone'])+zoo['backbone']),dist="norm",plot=pylab)
stats.probplot(zoo['breathes'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['breathes']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['breathes']),dist="norm",plot=pylab)
stats.probplot((zoo['breathes'] * zoo['breathes']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['breathes']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['breathes'])*np.exp(zoo['breathes']),dist="norm",plot=pylab)
reci_10=1/zoo['breathes']
reci_10_2=reci_10 * reci_10
reci_10_4=reci_10_2 * reci_10_2
stats.probplot(reci_10*reci_10,dist="norm",plot=pylab)
stats.probplot(reci_10_2,dist="norm",plot=pylab)
stats.probplot(reci_10_4,dist="norm",plot=pylab)
stats.probplot(reci_10_4*reci_10_4,dist="norm",plot=pylab)
stats.probplot((reci_10_4*reci_10_4)*(reci_10_4*reci_10_4),dist="norm",plot=pylab)
stats.probplot(((zoo['breathes'] * zoo['breathes'])+zoo['breathes']),dist="norm",plot=pylab)
stats.probplot(zoo['venomous'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['venomous']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['venomous']),dist="norm",plot=pylab)
stats.probplot((zoo['venomous'] * zoo['venomous']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['venomous']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['venomous'])*np.exp(zoo['venomous']),dist="norm",plot=pylab)
reci_11=1/zoo['venomous']
reci_11_2=reci_11 * reci_11
reci_11_4=reci_11_2 * reci_11_2
stats.probplot(reci_11*reci_11,dist="norm",plot=pylab)
stats.probplot(reci_11_2,dist="norm",plot=pylab)
stats.probplot(reci_11_4,dist="norm",plot=pylab)
stats.probplot(reci_11_4*reci_11_4,dist="norm",plot=pylab)
stats.probplot((reci_11_4*reci_11_4)*(reci_11_4*reci_11_4),dist="norm",plot=pylab)
stats.probplot(((zoo['venomous'] * zoo['venomous'])+zoo['venomous']),dist="norm",plot=pylab)
stats.probplot(zoo['fins'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['fins']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['fins']),dist="norm",plot=pylab)
stats.probplot((zoo['fins'] * zoo['fins']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['fins']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['fins'])*np.exp(zoo['fins']),dist="norm",plot=pylab)
reci_12=1/zoo['fins']
reci_12_2=reci_12 * reci_12
reci_12_4=reci_12_2 * reci_12_2
stats.probplot(reci_12*reci_12,dist="norm",plot=pylab)
stats.probplot(reci_12_2,dist="norm",plot=pylab)
stats.probplot(reci_12_4,dist="norm",plot=pylab)
stats.probplot(reci_12_4*reci_12_4,dist="norm",plot=pylab)
stats.probplot((reci_12_4*reci_12_4)*(reci_12_4*reci_12_4),dist="norm",plot=pylab)
stats.probplot(((zoo['fins'] * zoo['fins'])+zoo['fins']),dist="norm",plot=pylab)
stats.probplot(zoo['legs'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['legs']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['legs']),dist="norm",plot=pylab)
stats.probplot((zoo['legs'] * zoo['legs']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['legs']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['legs'])*np.exp(zoo['legs']),dist="norm",plot=pylab)
reci_13=1/zoo['legs']
reci_13_2=reci_13 * reci_13
reci_13_4=reci_13_2 * reci_13_2
stats.probplot(reci_13*reci_13,dist="norm",plot=pylab)
stats.probplot(reci_13_2,dist="norm",plot=pylab)
stats.probplot(reci_13_4,dist="norm",plot=pylab)
stats.probplot(reci_13_4*reci_13_4,dist="norm",plot=pylab)
stats.probplot((reci_13_4*reci_13_4)*(reci_13_4*reci_13_4),dist="norm",plot=pylab)
stats.probplot(((zoo['legs'] * zoo['legs'])+zoo['legs']),dist="norm",plot=pylab)
stats.probplot(zoo['tail'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['tail']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['tail']),dist="norm",plot=pylab)
stats.probplot((zoo['tail'] * zoo['tail']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['tail']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['tail'])*np.exp(zoo['tail']),dist="norm",plot=pylab)
reci_14=1/zoo['tail']
reci_14_2=reci_14 * reci_14
reci_14_4=reci_14_2 * reci_14_2
stats.probplot(reci_14*reci_14,dist="norm",plot=pylab)
stats.probplot(reci_14_2,dist="norm",plot=pylab)
stats.probplot(reci_14_4,dist="norm",plot=pylab)
stats.probplot(reci_14_4*reci_14_4,dist="norm",plot=pylab)
stats.probplot((reci_14_4*reci_14_4)*(reci_14_4*reci_14_4),dist="norm",plot=pylab)
stats.probplot(((zoo['tail'] * zoo['tail'])+zoo['tail']),dist="norm",plot=pylab)
stats.probplot(zoo['domestic'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['domestic']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['domestic']),dist="norm",plot=pylab)
stats.probplot((zoo['domestic'] * zoo['domestic']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['domestic']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['domestic'])*np.exp(zoo['domestic']),dist="norm",plot=pylab)
reci_15=1/zoo['domestic']
reci_15_2=reci_15 * reci_15
reci_15_4=reci_15_2 * reci_15_2
stats.probplot(reci_15*reci_15,dist="norm",plot=pylab)
stats.probplot(reci_15_2,dist="norm",plot=pylab)
stats.probplot(reci_15_4,dist="norm",plot=pylab)
stats.probplot(reci_15_4*reci_15_4,dist="norm",plot=pylab)
stats.probplot((reci_15_4*reci_15_4)*(reci_15_4*reci_15_4),dist="norm",plot=pylab)
stats.probplot(((zoo['domestic'] * zoo['domestic'])+zoo['domestic']),dist="norm",plot=pylab)
stats.probplot(zoo['catsize'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['catsize']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['catsize']),dist="norm",plot=pylab)
stats.probplot((zoo['catsize'] * zoo['catsize']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['catsize']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['catsize'])*np.exp(zoo['catsize']),dist="norm",plot=pylab)
reci_16=1/zoo['catsize']
reci_16_2=reci_16 * reci_16
reci_16_4=reci_16_2 * reci_16_2
stats.probplot(reci_16*reci_16,dist="norm",plot=pylab)
stats.probplot(reci_16_2,dist="norm",plot=pylab)
stats.probplot(reci_16_4,dist="norm",plot=pylab)
stats.probplot(reci_16_4*reci_16_4,dist="norm",plot=pylab)
stats.probplot((reci_16_4*reci_16_4)*(reci_16_4*reci_16_4),dist="norm",plot=pylab)
stats.probplot(((zoo['catsize'] * zoo['catsize'])+zoo['catsize']),dist="norm",plot=pylab)
stats.probplot(zoo['type'],dist="norm",plot=pylab)
stats.probplot(np.log(zoo['type']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(zoo['type']),dist="norm",plot=pylab)
stats.probplot((zoo['type'] * zoo['type']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['type']),dist="norm",plot=pylab)
stats.probplot(np.exp(zoo['type'])*np.exp(zoo['type']),dist="norm",plot=pylab)
reci_17=1/zoo['type']
reci_17_2=reci_17 * reci_17
reci_17_4=reci_17_2 * reci_17_2
stats.probplot(reci_17*reci_17,dist="norm",plot=pylab)
stats.probplot(reci_17_2,dist="norm",plot=pylab)
stats.probplot(reci_17_4,dist="norm",plot=pylab)
stats.probplot(reci_17_4*reci_17_4,dist="norm",plot=pylab)
stats.probplot((reci_17_4*reci_17_4)*(reci_17_4*reci_17_4),dist="norm",plot=pylab)
stats.probplot(((zoo['type'] * zoo['type'])+zoo['type']),dist="norm",plot=pylab)
# ppf => Percent point function 
#### hair
stats.norm.ppf(0.975,0.425743,0.496921)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["hair"],0.425743,0.496921) # similar to pnorm in R 
#### feathers
stats.norm.ppf(0.975,0.198020,0.400495)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["feathers"],0.198020,0.400495) # similar to pnorm in R 
#### eggs
stats.norm.ppf(0.975,0.584158,0.495325)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["eggs"],0.584158,0.495325) # similar to pnorm in R 
#### milk
stats.norm.ppf(0.975,0.405941, 0.493522)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["milk"], 0.405941, 0.493522) # similar to pnorm in R 
#### airborne
stats.norm.ppf(0.975,0.237624,0.427750)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["airborne"], 0.237624,0.427750) # similar to pnorm in R 
#### aquatic
stats.norm.ppf(0.975,0.356436,0.481335)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["aquatic"], 0.356436, 0.481335) # similar to pnorm in R 
#### predator
stats.norm.ppf(0.975,0.554455,0.499505)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["predator"],0.554455, 0.499505) # similar to pnorm in R 
#### toothed
stats.norm.ppf(0.975,0.603960,0.491512)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["toothed"],0.603960, 0.491512) # similar to pnorm in R 
#### backbone
stats.norm.ppf(0.975,0.821782,0.384605)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["backbone"],0.821782, 0.384605) # similar to pnorm in R 
#### breathes
stats.norm.ppf(0.975,0.792079,0.407844)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["breathes"],0.792079, 0.407844) # similar to pnorm in R 
#### venomous
stats.norm.ppf(0.975,0.079208,0.271410)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["venomous"],0.079208, 0.271410) # similar to pnorm in R 
#### fins
stats.norm.ppf(0.975,0.168317,0.376013)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["fins"],0.168317, 0.376013) # similar to pnorm in R 
#### legs
stats.norm.ppf(0.975,2.841584,2.033385)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["legs"],2.841584, 2.033385) # similar to pnorm in R 
#### tail
stats.norm.ppf(0.975,0.742574,0.439397)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["tail"],0.742574,0.439397) # similar to pnorm in R 
#### domestic
stats.norm.ppf(0.975,0.128713,0.336552)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["domestic"],0.128713,0.336552) # similar to pnorm in R 
#### catsize
stats.norm.ppf(0.975,0.435644,0.498314)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["catsize"],0.435644,0.498314) # similar to pnorm in R 
#### type
stats.norm.ppf(0.975,2.831683,2.102709)# similar to qnorm in R 
# cdf => cumulative distributive function 
stats.norm.cdf(zoo["type"],2.831683,2.102709) # similar to pnorm in R
##stats.t.ppf(0.975, 13) # similar to qt in R ------  2.1603686564610127
####Correlation 
zoo.corr(method = "pearson")
zoo.corr(method = "kendall")
# to get top 6 rows
zoo.head(30) # to get top n rows use cars.head(10)
zoo.tail(10)
##############################################################
# Training and Test data using 
from sklearn.model_selection import train_test_split
# KNN using sklearn 
# Importing Knn algorithm from sklearn.neighbors
def norm_func(i):
    x = (i-i.mean())/(i.std())
    return (x)
# Normalized data frame (considering the numerical part of data)
df_norm = norm_func(zoo.iloc[:,0:])
train,test = train_test_split(zoo,test_size = 0.2) # 0.2 => 20 percent of entire data 
from sklearn.neighbors import KNeighborsClassifier as KNC
# for 4 nearest neighbours 
neigh = KNC(n_neighbors= 4)
# Fitting with training data 
neigh.fit(train.iloc[:,0:17],train.iloc[:,17])
# train accuracy 
train_acc = np.mean(neigh.predict(train.iloc[:,0:17])==train.iloc[:,17]) 
# test accuracy
test_acc = np.mean(neigh.predict(test.iloc[:,0:17])==test.iloc[:,17]) 
# for 5 nearest neighbours
neigh = KNC(n_neighbors=5)
# fitting with training data
neigh.fit(train.iloc[:,0:17],train.iloc[:,17])
# train accuracy 
train_acc = np.mean(neigh.predict(train.iloc[:,0:17])==train.iloc[:,17]) 
# test accuracy
test_acc = np.mean(neigh.predict(test.iloc[:,0:17])==test.iloc[:,17]) 
# creating empty list variable 
acc = []
# running KNN algorithm for 2 to 50 nearest neighbours(even numbers) and 
# storing the accuracy values 

for i in range(2,50,2):
    neigh = KNC(n_neighbors=i)
    neigh.fit(train.iloc[:,0:17],train.iloc[:,17])
    train_acc = np.mean(neigh.predict(train.iloc[:,0:17])==train.iloc[:,17])
    test_acc = np.mean(neigh.predict(test.iloc[:,0:17])==test.iloc[:,17])
    acc.append([train_acc,test_acc])
import matplotlib.pyplot as plt # library to do visualizations 
# train accuracy plot 
plt.plot(np.arange(2,50,2),[i[0] for i in acc],"bo-")
# test accuracy plot
plt.plot(np.arange(2,50,2),[i[1] for i in acc],"ro-")
plt.legend(["train","test"])




