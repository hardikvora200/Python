import pandas as pd
import numpy as np
import seaborn as sns
##import scipy.stats as st
import matplotlib.pyplot as plt
from sklearn import preprocessing
# reading a csv file using pandas library
crime=pd.read_csv("C:\\Users\\sanu\\Downloads\\Desktop\\Documents\\Excelr_1\\Python\\Clustering\\Assignments\\crime_data.csv")
crime.rename({"Unnamed: 0":"a"}, axis="columns",inplace=True)
crime.columns
crime.drop(["a"],axis=1,inplace=True)
crime.columns
# To get the count of null values in the data 
crime.isnull().sum()
crime.shape # 50 4 => Before dropping null values
# To drop null values ( dropping rows)
crime.dropna().shape # 601 9 => After dropping null values
#####Exploratory Data Analysis#########################################################
crime.mean() ## crimes - 1.455907, age - 32.487521, yearsmarried  - 8.177696,religiousness - 3.116473
  ################education - 16.166389,occupation -4.194676,rating - 3.931780
crime.median() #### crimes - 0.0, age - 32, yearsmarried -7.0,religiousness - 3.0
  ################  education - 16.0,occupation - 5.0 ,rating - 4.0
crime.mode() 
####Measures of Dispersion
crime.var() 
crime.std() ## crimes - 3.298758, age - 9.288762, yearsmarried  - 5.571303, religiousness - 1.167509
  ################ education - 2.402555, occupation - 1.819443,rating - 1.103179
#### Calculate the range value
range1 = max(crime['crimes'])-min(crime['crimes'])  ### 12
range2 = max(crime['age'])-min(crime['age']) ### 39.5
range3 = max(crime['yearsmarried'])-min(crime['yearsmarried']) ### 14.875
range4 = max(crime['religiousness'])-min(crime['religiousness']) ### 4
range5 = max(crime['education'])-min(crime['education'])  ##  11
range6 = max(crime['occupation'])-min(crime['occupation']) ### 6
range7 = max(crime['rating'])-min(crime['rating']) #### 4
### Calculate skewness and Kurtosis
crime.skew() ## crimes - 2.346998, age - 0.889221, yearsmarried  -  0.078189, religiousness -  -0.089023
  ################ education - -0.250273, occupation - -0.740587,rating - -0.836214
crime.kurt() ## crimes -  4.256882, age - 0.231969, yearsmarried  -  -1.570553, religiousness - -1.008357
  ################ education - -0.301831, occupation -  -0.775692,rating -  -0.203801
####Graphidelivery_time Representation 
plt.hist(crime["crimes"])
plt.hist(crime["age"])
plt.hist(crime["yearsmarried"])
plt.hist(crime["religiousness"])
plt.hist(crime["education"])
plt.hist(crime["occupation"])
plt.hist(crime["rating"])
plt.boxplot(crime["crimes"],0,"rs",0)
plt.boxplot(crime["age"],0,"rs",0)
plt.boxplot(crime["yearsmarried"],0,"rs",0)
plt.boxplot(crime["religiousness"],0,"rs",0)
plt.boxplot(crime["education"],0,"rs",0)
plt.boxplot(crime["occupation"],0,"rs",0)
plt.boxplot(crime["rating"],0,"rs",0)
plt.plot(crime["age"],crime["crimes"],"bo");plt.xlabel("age");plt.ylabel("crimes")
plt.plot(crime["yearsmarried"],crime["crimes"],"bo");plt.xlabel("yearsmarried");plt.ylabel("crimes")
plt.plot(crime["religiousness"],crime["crimes"],"bo");plt.xlabel("religiousness");plt.ylabel("crimes")
plt.plot(crime["education"],crime["crimes"],"bo");plt.xlabel("education");plt.ylabel("crimes")
plt.plot(crime["occupation"],crime["crimes"],"bo");plt.xlabel("occupation");plt.ylabel("crimes")
plt.plot(crime["rating"],crime["crimes"],"bo");plt.xlabel("rating");plt.ylabel("crimes")
# table 
pd.crosstab(crime["age"],crime["crimes"])
pd.crosstab(crime["yearsmarried"],crime["crimes"])
pd.crosstab(crime["religiousness"],crime["crimes"])
pd.crosstab(crime["education"],crime["crimes"])
pd.crosstab(crime["occupation"],crime["crimes"])
pd.crosstab(crime["rating"],crime["crimes"])
## Barplot
pd.crosstab(crime["age"],crime["crimes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(crime["yearsmarried"],crime["crimes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(crime["religiousness"],crime["crimes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(crime["education"],crime["crimes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(crime["occupation"],crime["crimes"]).plot(kind = "bar", width = 1.85)
pd.crosstab(crime["rating"],crime["crimes"]).plot(kind = "bar", width = 1.85)
sns.countplot(x="age",data=crime,palette="hls")
sns.countplot(x="yearsmarried",data=crime,palette="hls")
sns.countplot(x="religiousness",data=crime,palette="hls")
sns.countplot(x="education",data=crime,palette="hls")
sns.countplot(x="occupation",data=crime,palette="hls")
sns.countplot(x="rating",data=crime,palette="hls")
# getting boxplot of Delivery Time with respect to each category of Sorting Time 
sns.boxplot(x="age",y="crimes",data=crime,palette="hls")
sns.boxplot(x="yearsmarried",y="crimes",data=crime,palette="hls")
sns.boxplot(x="religiousness",y="crimes",data=crime,palette="hls")
sns.boxplot(x="education",y="crimes",data=crime,palette="hls")
sns.boxplot(x="occupation",y="crimes",data=crime,palette="hls")
sns.boxplot(x="rating",y="crimes",data=crime,palette="hls")
sns.pairplot(crime.iloc[:,0:5]) # histogram of each column and scatter plot of each variable with respect to other columns
sns.pairplot(crime,hue="crime",size=2)
crime["age"].value_counts()
crime["yearsmarried"].value_counts()
crime["religiousness"].value_counts()
crime["education"].value_counts()
crime["occupation"].value_counts()
crime["rating"].value_counts()
crime["crimes"].value_counts()
crime["age"].value_counts().plot(kind = "pie")
crime["yearsmarried"].value_counts().plot(kind = "pie")
crime["religiousness"].value_counts().plot(kind = "pie")
crime["education"].value_counts().plot(kind = "pie")
crime["occupation"].value_counts().plot(kind = "pie")
crime["rating"].value_counts().plot(kind = "pie")
crime["crimes"].value_counts().plot(kind = "pie")
sns.pairplot(crime,hue="crimes",size=4,diag_kind = "kde")
sns.FacetGrid(crime,hue="crimes").map(plt.scatter,"age","crimes").add_legend()
sns.FacetGrid(crime,hue="crimes").map(plt.scatter,"yearsmarried","crimes").add_legend()
sns.FacetGrid(crime,hue="crimes").map(plt.scatter,"religiousness","crimes").add_legend()
sns.FacetGrid(crime,hue="crimes").map(plt.scatter,"education","crimes").add_legend()
sns.FacetGrid(crime,hue="crimes").map(plt.scatter,"occupation","crimes").add_legend()
sns.FacetGrid(crime,hue="crimes").map(plt.scatter,"rating","crimes").add_legend()
sns.FacetGrid(crime,hue="crimes").map(sns.kdeplot,"age").add_legend()
sns.FacetGrid(crime,hue="crimes").map(sns.kdeplot,"yearsmarried").add_legend()
sns.FacetGrid(crime,hue="crimes").map(sns.kdeplot,"religiousness").add_legend()
sns.FacetGrid(crime,hue="crimes").map(sns.kdeplot,"education").add_legend()
sns.FacetGrid(crime,hue="crimes").map(sns.kdeplot,"occupation").add_legend()
sns.FacetGrid(crime,hue="crimes").map(sns.kdeplot,"rating").add_legend()
help(plt.plot) # explore different visualizations among the scatter plot
import scipy.stats as stats
import pylab   
# Checking Whether data is normally distributed
stats.probplot(crime['age'], dist="norm",plot=pylab)
stats.probplot(np.log(crime['age']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(crime['age']),dist="norm",plot=pylab)
stats.probplot((crime['age'] * crime['age']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['age']),dist="norm",plot=pylab)
reci_1=1/crime['age']
stats.probplot(reci_1,dist="norm",plot=pylab)
stats.probplot(((crime['age'] * crime['age'])+crime['age']),dist="norm",plot=pylab)
stats.probplot(crime['yearsmarried'],dist="norm",plot=pylab)
stats.probplot(np.log(crime['yearsmarried']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(crime['yearsmarried']),dist="norm",plot=pylab)
stats.probplot((crime['yearsmarried'] * crime['yearsmarried']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['yearsmarried']),dist="norm",plot=pylab)
reci_2=1/crime['yearsmarried']
stats.probplot(reci_2,dist="norm",plot=pylab)
stats.probplot(((crime['yearsmarried'] * crime['yearsmarried'])+crime['yearsmarried']),dist="norm",plot=pylab)
stats.probplot(crime['religiousness'],dist="norm",plot=pylab)
stats.probplot(np.log(crime['religiousness']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(crime['religiousness']),dist="norm",plot=pylab)
stats.probplot((crime['religiousness'] * crime['religiousness']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['religiousness']),dist="norm",plot=pylab)
reci_3=1/crime['religiousness']
stats.probplot(reci_3,dist="norm",plot=pylab)
stats.probplot(((crime['religiousness'] * crime['religiousness'])+crime['religiousness']),dist="norm",plot=pylab)
stats.probplot(crime['education'],dist="norm",plot=pylab)
stats.probplot(np.log(crime['education']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(crime['education']),dist="norm",plot=pylab)
stats.probplot((crime['education'] * crime['education']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['education']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['education'])*np.exp(crime['education']),dist="norm",plot=pylab)
reci_4=1/crime['education']
reci_4_2=reci_4 * reci_4
reci_4_4=reci_4_2 * reci_4_2
stats.probplot(reci_4*reci_4,dist="norm",plot=pylab)
stats.probplot(reci_4_2,dist="norm",plot=pylab)
stats.probplot(reci_4_4,dist="norm",plot=pylab)
stats.probplot(reci_4_4*reci_4_4,dist="norm",plot=pylab)
stats.probplot((reci_4_4*reci_4_4)*(reci_4_4*reci_4_4),dist="norm",plot=pylab)
stats.probplot(((crime['education'] * crime['education'])+crime['education']),dist="norm",plot=pylab)
stats.probplot(crime['occupation'],dist="norm",plot=pylab)
stats.probplot(np.log(crime['occupation']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(crime['occupation']),dist="norm",plot=pylab)
stats.probplot((crime['occupation'] * crime['occupation']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['occupation']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['occupation'])*np.exp(crime['occupation']),dist="norm",plot=pylab)
reci_5=1/crime['occupation']
reci_5_2=reci_5 * reci_5
reci_5_4=reci_5_2 * reci_5_2
stats.probplot(reci_5*reci_5,dist="norm",plot=pylab)
stats.probplot(reci_5_2,dist="norm",plot=pylab)
stats.probplot(reci_5_4,dist="norm",plot=pylab)
stats.probplot(reci_5_4*reci_5_4,dist="norm",plot=pylab)
stats.probplot((reci_5_4*reci_5_4)*(reci_5_4*reci_5_4),dist="norm",plot=pylab)
stats.probplot(((crime['occupation'] * crime['occupation'])+crime['occupation']),dist="norm",plot=pylab)
stats.probplot(crime['rating'],dist="norm",plot=pylab)
stats.probplot(np.log(crime['rating']),dist="norm",plot=pylab)
stats.probplot(np.sqrt(crime['rating']),dist="norm",plot=pylab)
stats.probplot((crime['rating'] * crime['rating']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['rating']),dist="norm",plot=pylab)
stats.probplot(np.exp(crime['rating'])*np.exp(crime['rating']),dist="norm",plot=pylab)
reci_6=1/crime['rating']
reci_6_2=reci_6 * reci_6
reci_6_4=reci_6_2 * reci_6_2
stats.probplot(reci_6*reci_6,dist="norm",plot=pylab)
stats.probplot(reci_6_2,dist="norm",plot=pylab)
stats.probplot(reci_6_4,dist="norm",plot=pylab)
stats.probplot(reci_6_4*reci_6_4,dist="norm",plot=pylab)
stats.probplot((reci_6_4*reci_6_4)*(reci_6_4*reci_6_4),dist="norm",plot=pylab)
stats.probplot(((crime['rating'] * crime['rating'])+crime['rating']),dist="norm",plot=pylab)
# ppf => Percent point function 
#### age
stats.norm.ppf(0.975,32.487521,9.288762)# similar to qnorm in R ---- 50.69315998096424
# cdf => cumulative distributive function 
stats.norm.cdf(crime["age"],32.487521,9.288762) # similar to pnorm in R 
#### yearsmarried
stats.norm.ppf(0.975,8.177696,5.571303)# similar to qnorm in R ---- 19.097249226959956
# cdf => cumulative distributive function 
stats.norm.cdf(crime["yearsmarried"],8.177696,5.571303) # similar to pnorm in R 
#### religiousness
stats.norm.ppf(0.975,3.116473,1.167509)# similar to qnorm in R ---- 5.404748591626374.
# cdf => cumulative distributive function 
stats.norm.cdf(crime["religiousness"],3.116473,1.167509) # similar to pnorm in R 
#### education
stats.norm.ppf(0.975, 16.166389, 2.402555)# similar to qnorm in R ---- 20.87531027087663
# cdf => cumulative distributive function 
stats.norm.cdf(crime["education"], 16.166389, 2.402555) # similar to pnorm in R 
#### occupation
stats.norm.ppf(0.975, 4.194676, 1.819443)# similar to qnorm in R ---- 7.76071875192351
# cdf => cumulative distributive function 
stats.norm.cdf(crime["occupation"], 4.194676, 1.819443) # similar to pnorm in R 
#### rating
stats.norm.ppf(0.975, 3.931780, 1.103179)# similar to qnorm in R ---- 6.093971108500912
# cdf => cumulative distributive function 
stats.norm.cdf(crime["rating"], 3.931780, 1.103179) # similar to pnorm in R 
##stats.t.ppf(0.975, 13) # similar to qt in R ------  2.1603686564610127
####Correlation 
crime.corr(method = "pearson")
crime.corr(method = "kendall")
crime["crimes"].corr(crime["age"]) # # correlation value between X and Y -- 0.09
crime["crimes"].corr(crime["yearsmarried"])  ### 0.187
crime["crimes"].corr(crime["religiousness"]) ### -0.144
crime["crimes"].corr(crime["education"]) ### -0.002
crime["crimes"].corr(crime["occupation"]) #### 0.049
crime["crimes"].corr(crime["rating"]) #### -0.279
np.corrcoef(crime["age"],crime["crimes"])
np.corrcoef(crime["yearsmarried"],crime["crimes"])
np.corrcoef(crime["religiousness"],crime["crimes"])
np.corrcoef(crime["education"],crime["crimes"])
np.corrcoef(crime["occupation"],crime["crimes"])
np.corrcoef(crime["rating"],crime["crimes"])
###### Lets do normalization
a_array = np.array(crime['age'])
normalized_A = preprocessing.normalize([a_array])
b_array = np.array(crime['yearsmarried'])
normalized_B = preprocessing.normalize([b_array])
c_array = np.array(crime['religiousness'])
normalized_C = preprocessing.normalize([c_array])
d_array = np.array(crime['education'])
normalized_D = preprocessing.normalize([d_array])
e_array = np.array(crime['occupation'])
normalized_E = preprocessing.normalize([e_array])
f_array = np.array(crime['rating'])
normalized_F = preprocessing.normalize([f_array])
g_array = np.array(crime['crimes'])
normalized_G = preprocessing.normalize([g_array])
# to get top 6 rows
crime.head(40) # to get top n rows use cars.head(10)
crime.tail(10)
# Correlation matrix 
crime.corr()
# Scatter plot between the variables along with histograms
sns.pairplot(crime)
pd.tools.plotting.scatter_matrix(crime) ##-> also used for plotting all in one graph
